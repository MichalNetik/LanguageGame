dist: xenial

jobs:
  include:
    - stage: python-unit-tests
      # TODO: remove me
      if: branch = master
      language: python
      python:
        - 3.6
      env:
        - DJANGO_SETTINGS_MODULE=lang_game.settings.local
      install:
        - pip install -r webapp/requirements_dev.txt

      script:
        - python webapp/manage.py migrate
        - python webapp/manage.py loaddata sample_data
        - python webapp/manage.py test

    - stage: angular-unit-tests
      language: node_js
      node_js:
        - "10"
      addons:
        apt:
          sources:
            - google-chrome
          packages:
            - google-chrome-stable
      cache:
        directories:
          - ./angular/node_modules
      install:
        - pushd ./angular
        - npm install
        - popd
      script:
        - pushd ./angular
        - ng test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
        - popd

    - stage: dev-deploy
      # TODO: put me back
      # if: branch = develop
      env:
        - DJANGO_SETTINGS_MODULE=lang_game.settings.dev
        - VERSION_TAG=BETA
      services:
        - docker
      before_script:
        # Create digital ocean droplet
        - source ./bin/create_digital_ocean_droplet.sh $PROD_SSH_PUBLIC_FINGERPRINT $DIGITAL_OCEAN_TOKEN

        # Register private SSH key to be able to access the droplet
        - mkdir -p ~/.ssh
        - echo -e $PROD_SSH_PRIVATE_KEY | tr -d '\r' > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - eval "$(ssh-agent -s)"
        - ssh-add ~/.ssh/id_rsa
        - ssh-keyscan $DEPLOYMENT_DEV_SERVER_IP 2>&1 | tee -a $HOME/.ssh/known_hosts

        # Create "beta" images and push them to the docker hub
        - sudo echo $DOCKER_HUB_PASSWORD | docker login --username $DOCKER_HUB_USER_NAME --password-stdin
        - sudo docker-compose -f docker-compose.build.yml build --pull
        - sudo docker-compose -f docker-compose.build.yml push
      script:
        # Copy docker-compose.build.yml to the droplet, start the containers there and populate them with test data
        - scp ./docker-compose.run.yml root@$DEPLOYMENT_DEV_SERVER_IP:~/
        - |
          ssh root@$DEPLOYMENT_DEV_SERVER_IP <<-EOF
            export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE;
            export DJANGO_SECRET='$DEV_DJANGO_SECRET';
            export VERSION_TAG=$VERSION_TAG;

            echo $DOCKER_HUB_PASSWORD | docker login --username $DOCKER_HUB_USER_NAME --password-stdin;
            docker-compose -f docker-compose.run.yml pull;
            docker-compose -f docker-compose.run.yml up -d;
            docker-compose -f docker-compose.run.yml run web /usr/local/bin/python manage.py migrate;
            docker-compose -f docker-compose.run.yml run web /usr/local/bin/python manage.py loaddata sample_data;
          EOF

        # Run integration tests
        - ng e2e -- --baseUrl=http://$DEPLOYMENT_DEV_SERVER_IP --devServerTarget= --protractor-config=e2e/protractor-ci.conf.js

        # If everything is ok, create production images
        - export VERSION_TAG=PROD
        - docker-compose -f docker-compose.build.yml build
        - docker-compose -f docker-compose.build.yml push
      after_success:
        - source ./bin/auto_merge.sh "develop" "master" "$GITHUB_TOKEN"

      after_script:
        # Delete digital ocean droplet
        - source ./bin/delete_digital_ocean_droplet.sh

    - stage: prod-deploy
      if: branch = master
      env:
        - DJANGO_SETTINGS_MODULE=lang_game.settings.prod
        - VERSION_TAG=PROD
      services:
        - docker
      before_script:
        # Register private SSH key to be able to access the droplet
        - mkdir -p ~/.ssh
        - echo -e $PROD_SSH_PRIVATE_KEY | tr -d '\r' > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - eval "$(ssh-agent -s)"
        - ssh-add ~/.ssh/id_rsa
        - ssh-keyscan $DEPLOYMENT_PROD_SERVER_IP 2>&1 | tee -a $HOME/.ssh/known_hosts
      script:
        # Copy docker-compose.build.yml to the prod droplet and re-start the containers there
        - scp ./docker-compose.run.yml root@$DEPLOYMENT_PROD_SERVER_IP:~/
        - |
          ssh root@$DEPLOYMENT_PROD_SERVER_IP <<-EOF
            export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE;
            export DJANGO_SECRET='$PROD_DJANGO_SECRET';
            export VERSION_TAG=$VERSION_TAG;

            echo $DOCKER_HUB_PASSWORD | docker login --username $DOCKER_HUB_USER_NAME --password-stdin;
            docker-compose -f docker-compose.run.yml pull;
            docker-compose -f docker-compose.run.yml up -d --remove-orphans;
            docker-compose -f docker-compose.run.yml run web /usr/local/bin/python manage.py migrate;
          EOF