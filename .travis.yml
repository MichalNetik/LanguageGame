dist: xenial

services:
  - docker

jobs:
  include:
    # TODO: Create a stage running angular/typescript unittests
    - stage: python-unitests
      # TODO: REMOVE ME
      if: branch = master
      language: python
      python:
        - 3.6
      env:
        - DJANGO_SETTINGS_MODULE=lang_game.settings.local
      install:
        - pip install -r webapp/requirements_dev.txt

      script:
        - python webapp/manage.py migrate
        - python webapp/manage.py loaddata sample_data
        - python webapp/manage.py test

    - stage: dev-deploy
      language: python
      python:
        - 3.6
      env:
        - DJANGO_SETTINGS_MODULE=lang_game.settings.dev
        - VERSION_TAG=BETA
      before_script:
        # Create digital ocean droplet
        - source ./bin/create_digital_ocean_droplet.sh $PROD_SSH_PUBLIC_FINGERPRINT $DIGITAL_OCEAN_TOKEN

        # Register private SSH key to be able to access the droplet
        - mkdir -p ~/.ssh
        - echo -e $PROD_SSH_PRIVATE_KEY | tr -d '\r' > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - eval "$(ssh-agent -s)"
        - ssh-add ~/.ssh/id_rsa
        - ssh-keyscan $DEPLOYMENT_DEV_SERVER_IP 2>&1 | tee -a $HOME/.ssh/known_hosts

        # Create "beta" images and push them to the docker hub
        - sudo echo $DOCKER_HUB_PASSWORD | docker login --username $DOCKER_HUB_USER_NAME --password-stdin
        - sudo docker-compose -f docker-compose.yml build --pull
        - sudo docker-compose push
      script:
        # Copy docker-compose.yml to the droplet, start the containers there and populate them with test data
        - scp -r docker-compose.yml root@$DEPLOYMENT_DEV_SERVER_IP
        - ssh root@$DEPLOYMENT_DEV_SERVER_IP
            export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE;
            export DJANGO_SECRET='$DEV_DJANGO_SECRET';
            export VERSION_TAG=$VERSION_TAG;

            echo $DOCKER_HUB_PASSWORD | docker login --username $DOCKER_HUB_USER_NAME --password-stdin;
            docker-compose -f docker-compose.yml pull && docker-compose.yml up -d;
            docker-compose -f docker-compose.yml run web /usr/local/bin/python manage.py migrate;
            docker-compose -f docker-compose.yml run web /usr/local/bin/python manage.py loaddata sample_data;

        # TODO: Run integration tests

        # If everything is ok, create production images
        - export VERSION_TAG=PROD
        - docker-compose -f docker-compose.yml build
        - docker-compose push
      after_script:
        # Delete digital ocean droplet
        - source ./bin/delete_digital_ocean_droplet.sh

    - stage: prod-deploy
      env:
        - DJANGO_SETTINGS_MODULE=lang_game.settings.prod
        - VERSION_TAG=PROD
      before_script:
        # Register private SSH key to be able to access the droplet
        - mkdir -p ~/.ssh
        - echo -e $PROD_SSH_PRIVATE_KEY | tr -d '\r' > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - eval "$(ssh-agent -s)"
        - ssh-add ~/.ssh/id_rsa
        - ssh-keyscan $DEPLOYMENT_PROD_SERVER_IP 2>&1 | tee -a $HOME/.ssh/known_hosts
      script:
        # Copy docker-compose.yml to the prod droplet and re-start the containers there
        - scp -r docker-compose.yml root@$DEPLOYMENT_PROD_SERVER_IP
        - ssh root@$DEPLOYMENT_PROD_SERVER_IP
            export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE;
            export DJANGO_SECRET='$PROD_DJANGO_SECRET';
            export VERSION_TAG=$VERSION_TAG;

            docker-compose -f docker-compose.yml down;
            echo $DOCKER_HUB_PASSWORD | docker login --username $DOCKER_HUB_USER_NAME --password-stdin;
            docker-compose -f docker-compose.yml pull && docker-compose.yml up -d;
            docker-compose -f docker-compose.yml run web /usr/local/bin/python manage.py migrate;
